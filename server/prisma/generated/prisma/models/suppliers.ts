
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `suppliers` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model suppliers
 * 
 */
export type suppliersModel = runtime.Types.Result.DefaultSelection<Prisma.$suppliersPayload>

export type AggregateSuppliers = {
  _count: SuppliersCountAggregateOutputType | null
  _avg: SuppliersAvgAggregateOutputType | null
  _sum: SuppliersSumAggregateOutputType | null
  _min: SuppliersMinAggregateOutputType | null
  _max: SuppliersMaxAggregateOutputType | null
}

export type SuppliersAvgAggregateOutputType = {
  supplier_id: number | null
}

export type SuppliersSumAggregateOutputType = {
  supplier_id: number | null
}

export type SuppliersMinAggregateOutputType = {
  supplier_id: number | null
  supplier_name: string | null
  contact_name: string | null
  phone: string | null
}

export type SuppliersMaxAggregateOutputType = {
  supplier_id: number | null
  supplier_name: string | null
  contact_name: string | null
  phone: string | null
}

export type SuppliersCountAggregateOutputType = {
  supplier_id: number
  supplier_name: number
  contact_name: number
  phone: number
  _all: number
}


export type SuppliersAvgAggregateInputType = {
  supplier_id?: true
}

export type SuppliersSumAggregateInputType = {
  supplier_id?: true
}

export type SuppliersMinAggregateInputType = {
  supplier_id?: true
  supplier_name?: true
  contact_name?: true
  phone?: true
}

export type SuppliersMaxAggregateInputType = {
  supplier_id?: true
  supplier_name?: true
  contact_name?: true
  phone?: true
}

export type SuppliersCountAggregateInputType = {
  supplier_id?: true
  supplier_name?: true
  contact_name?: true
  phone?: true
  _all?: true
}

export type SuppliersAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which suppliers to aggregate.
   */
  where?: Prisma.suppliersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of suppliers to fetch.
   */
  orderBy?: Prisma.suppliersOrderByWithRelationInput | Prisma.suppliersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.suppliersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` suppliers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` suppliers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned suppliers
  **/
  _count?: true | SuppliersCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SuppliersAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SuppliersSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SuppliersMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SuppliersMaxAggregateInputType
}

export type GetSuppliersAggregateType<T extends SuppliersAggregateArgs> = {
      [P in keyof T & keyof AggregateSuppliers]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSuppliers[P]>
    : Prisma.GetScalarType<T[P], AggregateSuppliers[P]>
}




export type suppliersGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.suppliersWhereInput
  orderBy?: Prisma.suppliersOrderByWithAggregationInput | Prisma.suppliersOrderByWithAggregationInput[]
  by: Prisma.SuppliersScalarFieldEnum[] | Prisma.SuppliersScalarFieldEnum
  having?: Prisma.suppliersScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SuppliersCountAggregateInputType | true
  _avg?: SuppliersAvgAggregateInputType
  _sum?: SuppliersSumAggregateInputType
  _min?: SuppliersMinAggregateInputType
  _max?: SuppliersMaxAggregateInputType
}

export type SuppliersGroupByOutputType = {
  supplier_id: number
  supplier_name: string
  contact_name: string | null
  phone: string | null
  _count: SuppliersCountAggregateOutputType | null
  _avg: SuppliersAvgAggregateOutputType | null
  _sum: SuppliersSumAggregateOutputType | null
  _min: SuppliersMinAggregateOutputType | null
  _max: SuppliersMaxAggregateOutputType | null
}

type GetSuppliersGroupByPayload<T extends suppliersGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SuppliersGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SuppliersGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SuppliersGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SuppliersGroupByOutputType[P]>
      }
    >
  >



export type suppliersWhereInput = {
  AND?: Prisma.suppliersWhereInput | Prisma.suppliersWhereInput[]
  OR?: Prisma.suppliersWhereInput[]
  NOT?: Prisma.suppliersWhereInput | Prisma.suppliersWhereInput[]
  supplier_id?: Prisma.IntFilter<"suppliers"> | number
  supplier_name?: Prisma.StringFilter<"suppliers"> | string
  contact_name?: Prisma.StringNullableFilter<"suppliers"> | string | null
  phone?: Prisma.StringNullableFilter<"suppliers"> | string | null
}

export type suppliersOrderByWithRelationInput = {
  supplier_id?: Prisma.SortOrder
  supplier_name?: Prisma.SortOrder
  contact_name?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
}

export type suppliersWhereUniqueInput = Prisma.AtLeast<{
  supplier_id?: number
  AND?: Prisma.suppliersWhereInput | Prisma.suppliersWhereInput[]
  OR?: Prisma.suppliersWhereInput[]
  NOT?: Prisma.suppliersWhereInput | Prisma.suppliersWhereInput[]
  supplier_name?: Prisma.StringFilter<"suppliers"> | string
  contact_name?: Prisma.StringNullableFilter<"suppliers"> | string | null
  phone?: Prisma.StringNullableFilter<"suppliers"> | string | null
}, "supplier_id">

export type suppliersOrderByWithAggregationInput = {
  supplier_id?: Prisma.SortOrder
  supplier_name?: Prisma.SortOrder
  contact_name?: Prisma.SortOrderInput | Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.suppliersCountOrderByAggregateInput
  _avg?: Prisma.suppliersAvgOrderByAggregateInput
  _max?: Prisma.suppliersMaxOrderByAggregateInput
  _min?: Prisma.suppliersMinOrderByAggregateInput
  _sum?: Prisma.suppliersSumOrderByAggregateInput
}

export type suppliersScalarWhereWithAggregatesInput = {
  AND?: Prisma.suppliersScalarWhereWithAggregatesInput | Prisma.suppliersScalarWhereWithAggregatesInput[]
  OR?: Prisma.suppliersScalarWhereWithAggregatesInput[]
  NOT?: Prisma.suppliersScalarWhereWithAggregatesInput | Prisma.suppliersScalarWhereWithAggregatesInput[]
  supplier_id?: Prisma.IntWithAggregatesFilter<"suppliers"> | number
  supplier_name?: Prisma.StringWithAggregatesFilter<"suppliers"> | string
  contact_name?: Prisma.StringNullableWithAggregatesFilter<"suppliers"> | string | null
  phone?: Prisma.StringNullableWithAggregatesFilter<"suppliers"> | string | null
}

export type suppliersCreateInput = {
  supplier_name: string
  contact_name?: string | null
  phone?: string | null
}

export type suppliersUncheckedCreateInput = {
  supplier_id?: number
  supplier_name: string
  contact_name?: string | null
  phone?: string | null
}

export type suppliersUpdateInput = {
  supplier_name?: Prisma.StringFieldUpdateOperationsInput | string
  contact_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type suppliersUncheckedUpdateInput = {
  supplier_id?: Prisma.IntFieldUpdateOperationsInput | number
  supplier_name?: Prisma.StringFieldUpdateOperationsInput | string
  contact_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type suppliersCreateManyInput = {
  supplier_id?: number
  supplier_name: string
  contact_name?: string | null
  phone?: string | null
}

export type suppliersUpdateManyMutationInput = {
  supplier_name?: Prisma.StringFieldUpdateOperationsInput | string
  contact_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type suppliersUncheckedUpdateManyInput = {
  supplier_id?: Prisma.IntFieldUpdateOperationsInput | number
  supplier_name?: Prisma.StringFieldUpdateOperationsInput | string
  contact_name?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type suppliersCountOrderByAggregateInput = {
  supplier_id?: Prisma.SortOrder
  supplier_name?: Prisma.SortOrder
  contact_name?: Prisma.SortOrder
  phone?: Prisma.SortOrder
}

export type suppliersAvgOrderByAggregateInput = {
  supplier_id?: Prisma.SortOrder
}

export type suppliersMaxOrderByAggregateInput = {
  supplier_id?: Prisma.SortOrder
  supplier_name?: Prisma.SortOrder
  contact_name?: Prisma.SortOrder
  phone?: Prisma.SortOrder
}

export type suppliersMinOrderByAggregateInput = {
  supplier_id?: Prisma.SortOrder
  supplier_name?: Prisma.SortOrder
  contact_name?: Prisma.SortOrder
  phone?: Prisma.SortOrder
}

export type suppliersSumOrderByAggregateInput = {
  supplier_id?: Prisma.SortOrder
}



export type suppliersSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  supplier_id?: boolean
  supplier_name?: boolean
  contact_name?: boolean
  phone?: boolean
}, ExtArgs["result"]["suppliers"]>

export type suppliersSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  supplier_id?: boolean
  supplier_name?: boolean
  contact_name?: boolean
  phone?: boolean
}, ExtArgs["result"]["suppliers"]>

export type suppliersSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  supplier_id?: boolean
  supplier_name?: boolean
  contact_name?: boolean
  phone?: boolean
}, ExtArgs["result"]["suppliers"]>

export type suppliersSelectScalar = {
  supplier_id?: boolean
  supplier_name?: boolean
  contact_name?: boolean
  phone?: boolean
}

export type suppliersOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"supplier_id" | "supplier_name" | "contact_name" | "phone", ExtArgs["result"]["suppliers"]>

export type $suppliersPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "suppliers"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    supplier_id: number
    supplier_name: string
    contact_name: string | null
    phone: string | null
  }, ExtArgs["result"]["suppliers"]>
  composites: {}
}

export type suppliersGetPayload<S extends boolean | null | undefined | suppliersDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$suppliersPayload, S>

export type suppliersCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<suppliersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SuppliersCountAggregateInputType | true
  }

export interface suppliersDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['suppliers'], meta: { name: 'suppliers' } }
  /**
   * Find zero or one Suppliers that matches the filter.
   * @param {suppliersFindUniqueArgs} args - Arguments to find a Suppliers
   * @example
   * // Get one Suppliers
   * const suppliers = await prisma.suppliers.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends suppliersFindUniqueArgs>(args: Prisma.SelectSubset<T, suppliersFindUniqueArgs<ExtArgs>>): Prisma.Prisma__suppliersClient<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Suppliers that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {suppliersFindUniqueOrThrowArgs} args - Arguments to find a Suppliers
   * @example
   * // Get one Suppliers
   * const suppliers = await prisma.suppliers.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends suppliersFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, suppliersFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__suppliersClient<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Suppliers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {suppliersFindFirstArgs} args - Arguments to find a Suppliers
   * @example
   * // Get one Suppliers
   * const suppliers = await prisma.suppliers.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends suppliersFindFirstArgs>(args?: Prisma.SelectSubset<T, suppliersFindFirstArgs<ExtArgs>>): Prisma.Prisma__suppliersClient<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Suppliers that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {suppliersFindFirstOrThrowArgs} args - Arguments to find a Suppliers
   * @example
   * // Get one Suppliers
   * const suppliers = await prisma.suppliers.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends suppliersFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, suppliersFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__suppliersClient<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Suppliers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {suppliersFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Suppliers
   * const suppliers = await prisma.suppliers.findMany()
   * 
   * // Get first 10 Suppliers
   * const suppliers = await prisma.suppliers.findMany({ take: 10 })
   * 
   * // Only select the `supplier_id`
   * const suppliersWithSupplier_idOnly = await prisma.suppliers.findMany({ select: { supplier_id: true } })
   * 
   */
  findMany<T extends suppliersFindManyArgs>(args?: Prisma.SelectSubset<T, suppliersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Suppliers.
   * @param {suppliersCreateArgs} args - Arguments to create a Suppliers.
   * @example
   * // Create one Suppliers
   * const Suppliers = await prisma.suppliers.create({
   *   data: {
   *     // ... data to create a Suppliers
   *   }
   * })
   * 
   */
  create<T extends suppliersCreateArgs>(args: Prisma.SelectSubset<T, suppliersCreateArgs<ExtArgs>>): Prisma.Prisma__suppliersClient<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Suppliers.
   * @param {suppliersCreateManyArgs} args - Arguments to create many Suppliers.
   * @example
   * // Create many Suppliers
   * const suppliers = await prisma.suppliers.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends suppliersCreateManyArgs>(args?: Prisma.SelectSubset<T, suppliersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Suppliers and returns the data saved in the database.
   * @param {suppliersCreateManyAndReturnArgs} args - Arguments to create many Suppliers.
   * @example
   * // Create many Suppliers
   * const suppliers = await prisma.suppliers.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Suppliers and only return the `supplier_id`
   * const suppliersWithSupplier_idOnly = await prisma.suppliers.createManyAndReturn({
   *   select: { supplier_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends suppliersCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, suppliersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Suppliers.
   * @param {suppliersDeleteArgs} args - Arguments to delete one Suppliers.
   * @example
   * // Delete one Suppliers
   * const Suppliers = await prisma.suppliers.delete({
   *   where: {
   *     // ... filter to delete one Suppliers
   *   }
   * })
   * 
   */
  delete<T extends suppliersDeleteArgs>(args: Prisma.SelectSubset<T, suppliersDeleteArgs<ExtArgs>>): Prisma.Prisma__suppliersClient<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Suppliers.
   * @param {suppliersUpdateArgs} args - Arguments to update one Suppliers.
   * @example
   * // Update one Suppliers
   * const suppliers = await prisma.suppliers.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends suppliersUpdateArgs>(args: Prisma.SelectSubset<T, suppliersUpdateArgs<ExtArgs>>): Prisma.Prisma__suppliersClient<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Suppliers.
   * @param {suppliersDeleteManyArgs} args - Arguments to filter Suppliers to delete.
   * @example
   * // Delete a few Suppliers
   * const { count } = await prisma.suppliers.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends suppliersDeleteManyArgs>(args?: Prisma.SelectSubset<T, suppliersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Suppliers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {suppliersUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Suppliers
   * const suppliers = await prisma.suppliers.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends suppliersUpdateManyArgs>(args: Prisma.SelectSubset<T, suppliersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Suppliers and returns the data updated in the database.
   * @param {suppliersUpdateManyAndReturnArgs} args - Arguments to update many Suppliers.
   * @example
   * // Update many Suppliers
   * const suppliers = await prisma.suppliers.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Suppliers and only return the `supplier_id`
   * const suppliersWithSupplier_idOnly = await prisma.suppliers.updateManyAndReturn({
   *   select: { supplier_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends suppliersUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, suppliersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Suppliers.
   * @param {suppliersUpsertArgs} args - Arguments to update or create a Suppliers.
   * @example
   * // Update or create a Suppliers
   * const suppliers = await prisma.suppliers.upsert({
   *   create: {
   *     // ... data to create a Suppliers
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Suppliers we want to update
   *   }
   * })
   */
  upsert<T extends suppliersUpsertArgs>(args: Prisma.SelectSubset<T, suppliersUpsertArgs<ExtArgs>>): Prisma.Prisma__suppliersClient<runtime.Types.Result.GetResult<Prisma.$suppliersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Suppliers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {suppliersCountArgs} args - Arguments to filter Suppliers to count.
   * @example
   * // Count the number of Suppliers
   * const count = await prisma.suppliers.count({
   *   where: {
   *     // ... the filter for the Suppliers we want to count
   *   }
   * })
  **/
  count<T extends suppliersCountArgs>(
    args?: Prisma.Subset<T, suppliersCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SuppliersCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Suppliers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SuppliersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SuppliersAggregateArgs>(args: Prisma.Subset<T, SuppliersAggregateArgs>): Prisma.PrismaPromise<GetSuppliersAggregateType<T>>

  /**
   * Group by Suppliers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {suppliersGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends suppliersGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: suppliersGroupByArgs['orderBy'] }
      : { orderBy?: suppliersGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, suppliersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuppliersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the suppliers model
 */
readonly fields: suppliersFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for suppliers.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__suppliersClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the suppliers model
 */
export interface suppliersFieldRefs {
  readonly supplier_id: Prisma.FieldRef<"suppliers", 'Int'>
  readonly supplier_name: Prisma.FieldRef<"suppliers", 'String'>
  readonly contact_name: Prisma.FieldRef<"suppliers", 'String'>
  readonly phone: Prisma.FieldRef<"suppliers", 'String'>
}
    

// Custom InputTypes
/**
 * suppliers findUnique
 */
export type suppliersFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * Filter, which suppliers to fetch.
   */
  where: Prisma.suppliersWhereUniqueInput
}

/**
 * suppliers findUniqueOrThrow
 */
export type suppliersFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * Filter, which suppliers to fetch.
   */
  where: Prisma.suppliersWhereUniqueInput
}

/**
 * suppliers findFirst
 */
export type suppliersFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * Filter, which suppliers to fetch.
   */
  where?: Prisma.suppliersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of suppliers to fetch.
   */
  orderBy?: Prisma.suppliersOrderByWithRelationInput | Prisma.suppliersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for suppliers.
   */
  cursor?: Prisma.suppliersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` suppliers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` suppliers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of suppliers.
   */
  distinct?: Prisma.SuppliersScalarFieldEnum | Prisma.SuppliersScalarFieldEnum[]
}

/**
 * suppliers findFirstOrThrow
 */
export type suppliersFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * Filter, which suppliers to fetch.
   */
  where?: Prisma.suppliersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of suppliers to fetch.
   */
  orderBy?: Prisma.suppliersOrderByWithRelationInput | Prisma.suppliersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for suppliers.
   */
  cursor?: Prisma.suppliersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` suppliers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` suppliers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of suppliers.
   */
  distinct?: Prisma.SuppliersScalarFieldEnum | Prisma.SuppliersScalarFieldEnum[]
}

/**
 * suppliers findMany
 */
export type suppliersFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * Filter, which suppliers to fetch.
   */
  where?: Prisma.suppliersWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of suppliers to fetch.
   */
  orderBy?: Prisma.suppliersOrderByWithRelationInput | Prisma.suppliersOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing suppliers.
   */
  cursor?: Prisma.suppliersWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` suppliers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` suppliers.
   */
  skip?: number
  distinct?: Prisma.SuppliersScalarFieldEnum | Prisma.SuppliersScalarFieldEnum[]
}

/**
 * suppliers create
 */
export type suppliersCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * The data needed to create a suppliers.
   */
  data: Prisma.XOR<Prisma.suppliersCreateInput, Prisma.suppliersUncheckedCreateInput>
}

/**
 * suppliers createMany
 */
export type suppliersCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many suppliers.
   */
  data: Prisma.suppliersCreateManyInput | Prisma.suppliersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * suppliers createManyAndReturn
 */
export type suppliersCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * The data used to create many suppliers.
   */
  data: Prisma.suppliersCreateManyInput | Prisma.suppliersCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * suppliers update
 */
export type suppliersUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * The data needed to update a suppliers.
   */
  data: Prisma.XOR<Prisma.suppliersUpdateInput, Prisma.suppliersUncheckedUpdateInput>
  /**
   * Choose, which suppliers to update.
   */
  where: Prisma.suppliersWhereUniqueInput
}

/**
 * suppliers updateMany
 */
export type suppliersUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update suppliers.
   */
  data: Prisma.XOR<Prisma.suppliersUpdateManyMutationInput, Prisma.suppliersUncheckedUpdateManyInput>
  /**
   * Filter which suppliers to update
   */
  where?: Prisma.suppliersWhereInput
  /**
   * Limit how many suppliers to update.
   */
  limit?: number
}

/**
 * suppliers updateManyAndReturn
 */
export type suppliersUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * The data used to update suppliers.
   */
  data: Prisma.XOR<Prisma.suppliersUpdateManyMutationInput, Prisma.suppliersUncheckedUpdateManyInput>
  /**
   * Filter which suppliers to update
   */
  where?: Prisma.suppliersWhereInput
  /**
   * Limit how many suppliers to update.
   */
  limit?: number
}

/**
 * suppliers upsert
 */
export type suppliersUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * The filter to search for the suppliers to update in case it exists.
   */
  where: Prisma.suppliersWhereUniqueInput
  /**
   * In case the suppliers found by the `where` argument doesn't exist, create a new suppliers with this data.
   */
  create: Prisma.XOR<Prisma.suppliersCreateInput, Prisma.suppliersUncheckedCreateInput>
  /**
   * In case the suppliers was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.suppliersUpdateInput, Prisma.suppliersUncheckedUpdateInput>
}

/**
 * suppliers delete
 */
export type suppliersDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
  /**
   * Filter which suppliers to delete.
   */
  where: Prisma.suppliersWhereUniqueInput
}

/**
 * suppliers deleteMany
 */
export type suppliersDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which suppliers to delete
   */
  where?: Prisma.suppliersWhereInput
  /**
   * Limit how many suppliers to delete.
   */
  limit?: number
}

/**
 * suppliers without action
 */
export type suppliersDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the suppliers
   */
  select?: Prisma.suppliersSelect<ExtArgs> | null
  /**
   * Omit specific fields from the suppliers
   */
  omit?: Prisma.suppliersOmit<ExtArgs> | null
}
