
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `technicians` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model technicians
 * This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
 */
export type techniciansModel = runtime.Types.Result.DefaultSelection<Prisma.$techniciansPayload>

export type AggregateTechnicians = {
  _count: TechniciansCountAggregateOutputType | null
  _avg: TechniciansAvgAggregateOutputType | null
  _sum: TechniciansSumAggregateOutputType | null
  _min: TechniciansMinAggregateOutputType | null
  _max: TechniciansMaxAggregateOutputType | null
}

export type TechniciansAvgAggregateOutputType = {
  technician_id: number | null
  user_id: number | null
}

export type TechniciansSumAggregateOutputType = {
  technician_id: number | null
  user_id: number | null
}

export type TechniciansMinAggregateOutputType = {
  technician_id: number | null
  user_id: number | null
  certification: string | null
  is_active: boolean | null
  notes: string | null
}

export type TechniciansMaxAggregateOutputType = {
  technician_id: number | null
  user_id: number | null
  certification: string | null
  is_active: boolean | null
  notes: string | null
}

export type TechniciansCountAggregateOutputType = {
  technician_id: number
  user_id: number
  certification: number
  is_active: number
  notes: number
  _all: number
}


export type TechniciansAvgAggregateInputType = {
  technician_id?: true
  user_id?: true
}

export type TechniciansSumAggregateInputType = {
  technician_id?: true
  user_id?: true
}

export type TechniciansMinAggregateInputType = {
  technician_id?: true
  user_id?: true
  certification?: true
  is_active?: true
  notes?: true
}

export type TechniciansMaxAggregateInputType = {
  technician_id?: true
  user_id?: true
  certification?: true
  is_active?: true
  notes?: true
}

export type TechniciansCountAggregateInputType = {
  technician_id?: true
  user_id?: true
  certification?: true
  is_active?: true
  notes?: true
  _all?: true
}

export type TechniciansAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which technicians to aggregate.
   */
  where?: Prisma.techniciansWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of technicians to fetch.
   */
  orderBy?: Prisma.techniciansOrderByWithRelationInput | Prisma.techniciansOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.techniciansWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` technicians from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` technicians.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned technicians
  **/
  _count?: true | TechniciansCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TechniciansAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TechniciansSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TechniciansMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TechniciansMaxAggregateInputType
}

export type GetTechniciansAggregateType<T extends TechniciansAggregateArgs> = {
      [P in keyof T & keyof AggregateTechnicians]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTechnicians[P]>
    : Prisma.GetScalarType<T[P], AggregateTechnicians[P]>
}




export type techniciansGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.techniciansWhereInput
  orderBy?: Prisma.techniciansOrderByWithAggregationInput | Prisma.techniciansOrderByWithAggregationInput[]
  by: Prisma.TechniciansScalarFieldEnum[] | Prisma.TechniciansScalarFieldEnum
  having?: Prisma.techniciansScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TechniciansCountAggregateInputType | true
  _avg?: TechniciansAvgAggregateInputType
  _sum?: TechniciansSumAggregateInputType
  _min?: TechniciansMinAggregateInputType
  _max?: TechniciansMaxAggregateInputType
}

export type TechniciansGroupByOutputType = {
  technician_id: number
  user_id: number
  certification: string
  is_active: boolean | null
  notes: string | null
  _count: TechniciansCountAggregateOutputType | null
  _avg: TechniciansAvgAggregateOutputType | null
  _sum: TechniciansSumAggregateOutputType | null
  _min: TechniciansMinAggregateOutputType | null
  _max: TechniciansMaxAggregateOutputType | null
}

type GetTechniciansGroupByPayload<T extends techniciansGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TechniciansGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TechniciansGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TechniciansGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TechniciansGroupByOutputType[P]>
      }
    >
  >



export type techniciansWhereInput = {
  AND?: Prisma.techniciansWhereInput | Prisma.techniciansWhereInput[]
  OR?: Prisma.techniciansWhereInput[]
  NOT?: Prisma.techniciansWhereInput | Prisma.techniciansWhereInput[]
  technician_id?: Prisma.IntFilter<"technicians"> | number
  user_id?: Prisma.IntFilter<"technicians"> | number
  certification?: Prisma.StringFilter<"technicians"> | string
  is_active?: Prisma.BoolNullableFilter<"technicians"> | boolean | null
  notes?: Prisma.StringNullableFilter<"technicians"> | string | null
  users?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
  vehiclemaintenance?: Prisma.VehiclemaintenanceListRelationFilter
}

export type techniciansOrderByWithRelationInput = {
  technician_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  certification?: Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  users?: Prisma.usersOrderByWithRelationInput
  vehiclemaintenance?: Prisma.vehiclemaintenanceOrderByRelationAggregateInput
}

export type techniciansWhereUniqueInput = Prisma.AtLeast<{
  technician_id?: number
  user_id?: number
  AND?: Prisma.techniciansWhereInput | Prisma.techniciansWhereInput[]
  OR?: Prisma.techniciansWhereInput[]
  NOT?: Prisma.techniciansWhereInput | Prisma.techniciansWhereInput[]
  certification?: Prisma.StringFilter<"technicians"> | string
  is_active?: Prisma.BoolNullableFilter<"technicians"> | boolean | null
  notes?: Prisma.StringNullableFilter<"technicians"> | string | null
  users?: Prisma.XOR<Prisma.UsersScalarRelationFilter, Prisma.usersWhereInput>
  vehiclemaintenance?: Prisma.VehiclemaintenanceListRelationFilter
}, "technician_id" | "user_id">

export type techniciansOrderByWithAggregationInput = {
  technician_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  certification?: Prisma.SortOrder
  is_active?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.techniciansCountOrderByAggregateInput
  _avg?: Prisma.techniciansAvgOrderByAggregateInput
  _max?: Prisma.techniciansMaxOrderByAggregateInput
  _min?: Prisma.techniciansMinOrderByAggregateInput
  _sum?: Prisma.techniciansSumOrderByAggregateInput
}

export type techniciansScalarWhereWithAggregatesInput = {
  AND?: Prisma.techniciansScalarWhereWithAggregatesInput | Prisma.techniciansScalarWhereWithAggregatesInput[]
  OR?: Prisma.techniciansScalarWhereWithAggregatesInput[]
  NOT?: Prisma.techniciansScalarWhereWithAggregatesInput | Prisma.techniciansScalarWhereWithAggregatesInput[]
  technician_id?: Prisma.IntWithAggregatesFilter<"technicians"> | number
  user_id?: Prisma.IntWithAggregatesFilter<"technicians"> | number
  certification?: Prisma.StringWithAggregatesFilter<"technicians"> | string
  is_active?: Prisma.BoolNullableWithAggregatesFilter<"technicians"> | boolean | null
  notes?: Prisma.StringNullableWithAggregatesFilter<"technicians"> | string | null
}

export type techniciansCreateInput = {
  certification: string
  is_active?: boolean | null
  notes?: string | null
  users: Prisma.usersCreateNestedOneWithoutTechniciansInput
  vehiclemaintenance?: Prisma.vehiclemaintenanceCreateNestedManyWithoutTechniciansInput
}

export type techniciansUncheckedCreateInput = {
  technician_id?: number
  user_id: number
  certification: string
  is_active?: boolean | null
  notes?: string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceUncheckedCreateNestedManyWithoutTechniciansInput
}

export type techniciansUpdateInput = {
  certification?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  users?: Prisma.usersUpdateOneRequiredWithoutTechniciansNestedInput
  vehiclemaintenance?: Prisma.vehiclemaintenanceUpdateManyWithoutTechniciansNestedInput
}

export type techniciansUncheckedUpdateInput = {
  technician_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  certification?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceUncheckedUpdateManyWithoutTechniciansNestedInput
}

export type techniciansCreateManyInput = {
  technician_id?: number
  user_id: number
  certification: string
  is_active?: boolean | null
  notes?: string | null
}

export type techniciansUpdateManyMutationInput = {
  certification?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type techniciansUncheckedUpdateManyInput = {
  technician_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  certification?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type techniciansCountOrderByAggregateInput = {
  technician_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  certification?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type techniciansAvgOrderByAggregateInput = {
  technician_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type techniciansMaxOrderByAggregateInput = {
  technician_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  certification?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type techniciansMinOrderByAggregateInput = {
  technician_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
  certification?: Prisma.SortOrder
  is_active?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type techniciansSumOrderByAggregateInput = {
  technician_id?: Prisma.SortOrder
  user_id?: Prisma.SortOrder
}

export type TechniciansNullableScalarRelationFilter = {
  is?: Prisma.techniciansWhereInput | null
  isNot?: Prisma.techniciansWhereInput | null
}

export type NullableBoolFieldUpdateOperationsInput = {
  set?: boolean | null
}

export type techniciansCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.techniciansCreateWithoutUsersInput, Prisma.techniciansUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.techniciansCreateOrConnectWithoutUsersInput
  connect?: Prisma.techniciansWhereUniqueInput
}

export type techniciansUncheckedCreateNestedOneWithoutUsersInput = {
  create?: Prisma.XOR<Prisma.techniciansCreateWithoutUsersInput, Prisma.techniciansUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.techniciansCreateOrConnectWithoutUsersInput
  connect?: Prisma.techniciansWhereUniqueInput
}

export type techniciansUpdateOneWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.techniciansCreateWithoutUsersInput, Prisma.techniciansUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.techniciansCreateOrConnectWithoutUsersInput
  upsert?: Prisma.techniciansUpsertWithoutUsersInput
  disconnect?: Prisma.techniciansWhereInput | boolean
  delete?: Prisma.techniciansWhereInput | boolean
  connect?: Prisma.techniciansWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.techniciansUpdateToOneWithWhereWithoutUsersInput, Prisma.techniciansUpdateWithoutUsersInput>, Prisma.techniciansUncheckedUpdateWithoutUsersInput>
}

export type techniciansUncheckedUpdateOneWithoutUsersNestedInput = {
  create?: Prisma.XOR<Prisma.techniciansCreateWithoutUsersInput, Prisma.techniciansUncheckedCreateWithoutUsersInput>
  connectOrCreate?: Prisma.techniciansCreateOrConnectWithoutUsersInput
  upsert?: Prisma.techniciansUpsertWithoutUsersInput
  disconnect?: Prisma.techniciansWhereInput | boolean
  delete?: Prisma.techniciansWhereInput | boolean
  connect?: Prisma.techniciansWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.techniciansUpdateToOneWithWhereWithoutUsersInput, Prisma.techniciansUpdateWithoutUsersInput>, Prisma.techniciansUncheckedUpdateWithoutUsersInput>
}

export type techniciansCreateNestedOneWithoutVehiclemaintenanceInput = {
  create?: Prisma.XOR<Prisma.techniciansCreateWithoutVehiclemaintenanceInput, Prisma.techniciansUncheckedCreateWithoutVehiclemaintenanceInput>
  connectOrCreate?: Prisma.techniciansCreateOrConnectWithoutVehiclemaintenanceInput
  connect?: Prisma.techniciansWhereUniqueInput
}

export type techniciansUpdateOneWithoutVehiclemaintenanceNestedInput = {
  create?: Prisma.XOR<Prisma.techniciansCreateWithoutVehiclemaintenanceInput, Prisma.techniciansUncheckedCreateWithoutVehiclemaintenanceInput>
  connectOrCreate?: Prisma.techniciansCreateOrConnectWithoutVehiclemaintenanceInput
  upsert?: Prisma.techniciansUpsertWithoutVehiclemaintenanceInput
  disconnect?: Prisma.techniciansWhereInput | boolean
  delete?: Prisma.techniciansWhereInput | boolean
  connect?: Prisma.techniciansWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.techniciansUpdateToOneWithWhereWithoutVehiclemaintenanceInput, Prisma.techniciansUpdateWithoutVehiclemaintenanceInput>, Prisma.techniciansUncheckedUpdateWithoutVehiclemaintenanceInput>
}

export type techniciansCreateWithoutUsersInput = {
  certification: string
  is_active?: boolean | null
  notes?: string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceCreateNestedManyWithoutTechniciansInput
}

export type techniciansUncheckedCreateWithoutUsersInput = {
  technician_id?: number
  certification: string
  is_active?: boolean | null
  notes?: string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceUncheckedCreateNestedManyWithoutTechniciansInput
}

export type techniciansCreateOrConnectWithoutUsersInput = {
  where: Prisma.techniciansWhereUniqueInput
  create: Prisma.XOR<Prisma.techniciansCreateWithoutUsersInput, Prisma.techniciansUncheckedCreateWithoutUsersInput>
}

export type techniciansUpsertWithoutUsersInput = {
  update: Prisma.XOR<Prisma.techniciansUpdateWithoutUsersInput, Prisma.techniciansUncheckedUpdateWithoutUsersInput>
  create: Prisma.XOR<Prisma.techniciansCreateWithoutUsersInput, Prisma.techniciansUncheckedCreateWithoutUsersInput>
  where?: Prisma.techniciansWhereInput
}

export type techniciansUpdateToOneWithWhereWithoutUsersInput = {
  where?: Prisma.techniciansWhereInput
  data: Prisma.XOR<Prisma.techniciansUpdateWithoutUsersInput, Prisma.techniciansUncheckedUpdateWithoutUsersInput>
}

export type techniciansUpdateWithoutUsersInput = {
  certification?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceUpdateManyWithoutTechniciansNestedInput
}

export type techniciansUncheckedUpdateWithoutUsersInput = {
  technician_id?: Prisma.IntFieldUpdateOperationsInput | number
  certification?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceUncheckedUpdateManyWithoutTechniciansNestedInput
}

export type techniciansCreateWithoutVehiclemaintenanceInput = {
  certification: string
  is_active?: boolean | null
  notes?: string | null
  users: Prisma.usersCreateNestedOneWithoutTechniciansInput
}

export type techniciansUncheckedCreateWithoutVehiclemaintenanceInput = {
  technician_id?: number
  user_id: number
  certification: string
  is_active?: boolean | null
  notes?: string | null
}

export type techniciansCreateOrConnectWithoutVehiclemaintenanceInput = {
  where: Prisma.techniciansWhereUniqueInput
  create: Prisma.XOR<Prisma.techniciansCreateWithoutVehiclemaintenanceInput, Prisma.techniciansUncheckedCreateWithoutVehiclemaintenanceInput>
}

export type techniciansUpsertWithoutVehiclemaintenanceInput = {
  update: Prisma.XOR<Prisma.techniciansUpdateWithoutVehiclemaintenanceInput, Prisma.techniciansUncheckedUpdateWithoutVehiclemaintenanceInput>
  create: Prisma.XOR<Prisma.techniciansCreateWithoutVehiclemaintenanceInput, Prisma.techniciansUncheckedCreateWithoutVehiclemaintenanceInput>
  where?: Prisma.techniciansWhereInput
}

export type techniciansUpdateToOneWithWhereWithoutVehiclemaintenanceInput = {
  where?: Prisma.techniciansWhereInput
  data: Prisma.XOR<Prisma.techniciansUpdateWithoutVehiclemaintenanceInput, Prisma.techniciansUncheckedUpdateWithoutVehiclemaintenanceInput>
}

export type techniciansUpdateWithoutVehiclemaintenanceInput = {
  certification?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  users?: Prisma.usersUpdateOneRequiredWithoutTechniciansNestedInput
}

export type techniciansUncheckedUpdateWithoutVehiclemaintenanceInput = {
  technician_id?: Prisma.IntFieldUpdateOperationsInput | number
  user_id?: Prisma.IntFieldUpdateOperationsInput | number
  certification?: Prisma.StringFieldUpdateOperationsInput | string
  is_active?: Prisma.NullableBoolFieldUpdateOperationsInput | boolean | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type TechniciansCountOutputType
 */

export type TechniciansCountOutputType = {
  vehiclemaintenance: number
}

export type TechniciansCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vehiclemaintenance?: boolean | TechniciansCountOutputTypeCountVehiclemaintenanceArgs
}

/**
 * TechniciansCountOutputType without action
 */
export type TechniciansCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TechniciansCountOutputType
   */
  select?: Prisma.TechniciansCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TechniciansCountOutputType without action
 */
export type TechniciansCountOutputTypeCountVehiclemaintenanceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.vehiclemaintenanceWhereInput
}


export type techniciansSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  technician_id?: boolean
  user_id?: boolean
  certification?: boolean
  is_active?: boolean
  notes?: boolean
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
  vehiclemaintenance?: boolean | Prisma.technicians$vehiclemaintenanceArgs<ExtArgs>
  _count?: boolean | Prisma.TechniciansCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["technicians"]>

export type techniciansSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  technician_id?: boolean
  user_id?: boolean
  certification?: boolean
  is_active?: boolean
  notes?: boolean
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["technicians"]>

export type techniciansSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  technician_id?: boolean
  user_id?: boolean
  certification?: boolean
  is_active?: boolean
  notes?: boolean
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}, ExtArgs["result"]["technicians"]>

export type techniciansSelectScalar = {
  technician_id?: boolean
  user_id?: boolean
  certification?: boolean
  is_active?: boolean
  notes?: boolean
}

export type techniciansOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"technician_id" | "user_id" | "certification" | "is_active" | "notes", ExtArgs["result"]["technicians"]>
export type techniciansInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
  vehiclemaintenance?: boolean | Prisma.technicians$vehiclemaintenanceArgs<ExtArgs>
  _count?: boolean | Prisma.TechniciansCountOutputTypeDefaultArgs<ExtArgs>
}
export type techniciansIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}
export type techniciansIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  users?: boolean | Prisma.usersDefaultArgs<ExtArgs>
}

export type $techniciansPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "technicians"
  objects: {
    users: Prisma.$usersPayload<ExtArgs>
    vehiclemaintenance: Prisma.$vehiclemaintenancePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    technician_id: number
    user_id: number
    certification: string
    is_active: boolean | null
    notes: string | null
  }, ExtArgs["result"]["technicians"]>
  composites: {}
}

export type techniciansGetPayload<S extends boolean | null | undefined | techniciansDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$techniciansPayload, S>

export type techniciansCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<techniciansFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TechniciansCountAggregateInputType | true
  }

export interface techniciansDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['technicians'], meta: { name: 'technicians' } }
  /**
   * Find zero or one Technicians that matches the filter.
   * @param {techniciansFindUniqueArgs} args - Arguments to find a Technicians
   * @example
   * // Get one Technicians
   * const technicians = await prisma.technicians.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends techniciansFindUniqueArgs>(args: Prisma.SelectSubset<T, techniciansFindUniqueArgs<ExtArgs>>): Prisma.Prisma__techniciansClient<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Technicians that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {techniciansFindUniqueOrThrowArgs} args - Arguments to find a Technicians
   * @example
   * // Get one Technicians
   * const technicians = await prisma.technicians.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends techniciansFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, techniciansFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__techniciansClient<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Technicians that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {techniciansFindFirstArgs} args - Arguments to find a Technicians
   * @example
   * // Get one Technicians
   * const technicians = await prisma.technicians.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends techniciansFindFirstArgs>(args?: Prisma.SelectSubset<T, techniciansFindFirstArgs<ExtArgs>>): Prisma.Prisma__techniciansClient<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Technicians that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {techniciansFindFirstOrThrowArgs} args - Arguments to find a Technicians
   * @example
   * // Get one Technicians
   * const technicians = await prisma.technicians.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends techniciansFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, techniciansFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__techniciansClient<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Technicians that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {techniciansFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Technicians
   * const technicians = await prisma.technicians.findMany()
   * 
   * // Get first 10 Technicians
   * const technicians = await prisma.technicians.findMany({ take: 10 })
   * 
   * // Only select the `technician_id`
   * const techniciansWithTechnician_idOnly = await prisma.technicians.findMany({ select: { technician_id: true } })
   * 
   */
  findMany<T extends techniciansFindManyArgs>(args?: Prisma.SelectSubset<T, techniciansFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Technicians.
   * @param {techniciansCreateArgs} args - Arguments to create a Technicians.
   * @example
   * // Create one Technicians
   * const Technicians = await prisma.technicians.create({
   *   data: {
   *     // ... data to create a Technicians
   *   }
   * })
   * 
   */
  create<T extends techniciansCreateArgs>(args: Prisma.SelectSubset<T, techniciansCreateArgs<ExtArgs>>): Prisma.Prisma__techniciansClient<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Technicians.
   * @param {techniciansCreateManyArgs} args - Arguments to create many Technicians.
   * @example
   * // Create many Technicians
   * const technicians = await prisma.technicians.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends techniciansCreateManyArgs>(args?: Prisma.SelectSubset<T, techniciansCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Technicians and returns the data saved in the database.
   * @param {techniciansCreateManyAndReturnArgs} args - Arguments to create many Technicians.
   * @example
   * // Create many Technicians
   * const technicians = await prisma.technicians.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Technicians and only return the `technician_id`
   * const techniciansWithTechnician_idOnly = await prisma.technicians.createManyAndReturn({
   *   select: { technician_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends techniciansCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, techniciansCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Technicians.
   * @param {techniciansDeleteArgs} args - Arguments to delete one Technicians.
   * @example
   * // Delete one Technicians
   * const Technicians = await prisma.technicians.delete({
   *   where: {
   *     // ... filter to delete one Technicians
   *   }
   * })
   * 
   */
  delete<T extends techniciansDeleteArgs>(args: Prisma.SelectSubset<T, techniciansDeleteArgs<ExtArgs>>): Prisma.Prisma__techniciansClient<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Technicians.
   * @param {techniciansUpdateArgs} args - Arguments to update one Technicians.
   * @example
   * // Update one Technicians
   * const technicians = await prisma.technicians.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends techniciansUpdateArgs>(args: Prisma.SelectSubset<T, techniciansUpdateArgs<ExtArgs>>): Prisma.Prisma__techniciansClient<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Technicians.
   * @param {techniciansDeleteManyArgs} args - Arguments to filter Technicians to delete.
   * @example
   * // Delete a few Technicians
   * const { count } = await prisma.technicians.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends techniciansDeleteManyArgs>(args?: Prisma.SelectSubset<T, techniciansDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Technicians.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {techniciansUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Technicians
   * const technicians = await prisma.technicians.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends techniciansUpdateManyArgs>(args: Prisma.SelectSubset<T, techniciansUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Technicians and returns the data updated in the database.
   * @param {techniciansUpdateManyAndReturnArgs} args - Arguments to update many Technicians.
   * @example
   * // Update many Technicians
   * const technicians = await prisma.technicians.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Technicians and only return the `technician_id`
   * const techniciansWithTechnician_idOnly = await prisma.technicians.updateManyAndReturn({
   *   select: { technician_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends techniciansUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, techniciansUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Technicians.
   * @param {techniciansUpsertArgs} args - Arguments to update or create a Technicians.
   * @example
   * // Update or create a Technicians
   * const technicians = await prisma.technicians.upsert({
   *   create: {
   *     // ... data to create a Technicians
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Technicians we want to update
   *   }
   * })
   */
  upsert<T extends techniciansUpsertArgs>(args: Prisma.SelectSubset<T, techniciansUpsertArgs<ExtArgs>>): Prisma.Prisma__techniciansClient<runtime.Types.Result.GetResult<Prisma.$techniciansPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Technicians.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {techniciansCountArgs} args - Arguments to filter Technicians to count.
   * @example
   * // Count the number of Technicians
   * const count = await prisma.technicians.count({
   *   where: {
   *     // ... the filter for the Technicians we want to count
   *   }
   * })
  **/
  count<T extends techniciansCountArgs>(
    args?: Prisma.Subset<T, techniciansCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TechniciansCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Technicians.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TechniciansAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TechniciansAggregateArgs>(args: Prisma.Subset<T, TechniciansAggregateArgs>): Prisma.PrismaPromise<GetTechniciansAggregateType<T>>

  /**
   * Group by Technicians.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {techniciansGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends techniciansGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: techniciansGroupByArgs['orderBy'] }
      : { orderBy?: techniciansGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, techniciansGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTechniciansGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the technicians model
 */
readonly fields: techniciansFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for technicians.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__techniciansClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  users<T extends Prisma.usersDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.usersDefaultArgs<ExtArgs>>): Prisma.Prisma__usersClient<runtime.Types.Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  vehiclemaintenance<T extends Prisma.technicians$vehiclemaintenanceArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.technicians$vehiclemaintenanceArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$vehiclemaintenancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the technicians model
 */
export interface techniciansFieldRefs {
  readonly technician_id: Prisma.FieldRef<"technicians", 'Int'>
  readonly user_id: Prisma.FieldRef<"technicians", 'Int'>
  readonly certification: Prisma.FieldRef<"technicians", 'String'>
  readonly is_active: Prisma.FieldRef<"technicians", 'Boolean'>
  readonly notes: Prisma.FieldRef<"technicians", 'String'>
}
    

// Custom InputTypes
/**
 * technicians findUnique
 */
export type techniciansFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
  /**
   * Filter, which technicians to fetch.
   */
  where: Prisma.techniciansWhereUniqueInput
}

/**
 * technicians findUniqueOrThrow
 */
export type techniciansFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
  /**
   * Filter, which technicians to fetch.
   */
  where: Prisma.techniciansWhereUniqueInput
}

/**
 * technicians findFirst
 */
export type techniciansFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
  /**
   * Filter, which technicians to fetch.
   */
  where?: Prisma.techniciansWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of technicians to fetch.
   */
  orderBy?: Prisma.techniciansOrderByWithRelationInput | Prisma.techniciansOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for technicians.
   */
  cursor?: Prisma.techniciansWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` technicians from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` technicians.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of technicians.
   */
  distinct?: Prisma.TechniciansScalarFieldEnum | Prisma.TechniciansScalarFieldEnum[]
}

/**
 * technicians findFirstOrThrow
 */
export type techniciansFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
  /**
   * Filter, which technicians to fetch.
   */
  where?: Prisma.techniciansWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of technicians to fetch.
   */
  orderBy?: Prisma.techniciansOrderByWithRelationInput | Prisma.techniciansOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for technicians.
   */
  cursor?: Prisma.techniciansWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` technicians from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` technicians.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of technicians.
   */
  distinct?: Prisma.TechniciansScalarFieldEnum | Prisma.TechniciansScalarFieldEnum[]
}

/**
 * technicians findMany
 */
export type techniciansFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
  /**
   * Filter, which technicians to fetch.
   */
  where?: Prisma.techniciansWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of technicians to fetch.
   */
  orderBy?: Prisma.techniciansOrderByWithRelationInput | Prisma.techniciansOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing technicians.
   */
  cursor?: Prisma.techniciansWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` technicians from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` technicians.
   */
  skip?: number
  distinct?: Prisma.TechniciansScalarFieldEnum | Prisma.TechniciansScalarFieldEnum[]
}

/**
 * technicians create
 */
export type techniciansCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
  /**
   * The data needed to create a technicians.
   */
  data: Prisma.XOR<Prisma.techniciansCreateInput, Prisma.techniciansUncheckedCreateInput>
}

/**
 * technicians createMany
 */
export type techniciansCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many technicians.
   */
  data: Prisma.techniciansCreateManyInput | Prisma.techniciansCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * technicians createManyAndReturn
 */
export type techniciansCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * The data used to create many technicians.
   */
  data: Prisma.techniciansCreateManyInput | Prisma.techniciansCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * technicians update
 */
export type techniciansUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
  /**
   * The data needed to update a technicians.
   */
  data: Prisma.XOR<Prisma.techniciansUpdateInput, Prisma.techniciansUncheckedUpdateInput>
  /**
   * Choose, which technicians to update.
   */
  where: Prisma.techniciansWhereUniqueInput
}

/**
 * technicians updateMany
 */
export type techniciansUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update technicians.
   */
  data: Prisma.XOR<Prisma.techniciansUpdateManyMutationInput, Prisma.techniciansUncheckedUpdateManyInput>
  /**
   * Filter which technicians to update
   */
  where?: Prisma.techniciansWhereInput
  /**
   * Limit how many technicians to update.
   */
  limit?: number
}

/**
 * technicians updateManyAndReturn
 */
export type techniciansUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * The data used to update technicians.
   */
  data: Prisma.XOR<Prisma.techniciansUpdateManyMutationInput, Prisma.techniciansUncheckedUpdateManyInput>
  /**
   * Filter which technicians to update
   */
  where?: Prisma.techniciansWhereInput
  /**
   * Limit how many technicians to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * technicians upsert
 */
export type techniciansUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
  /**
   * The filter to search for the technicians to update in case it exists.
   */
  where: Prisma.techniciansWhereUniqueInput
  /**
   * In case the technicians found by the `where` argument doesn't exist, create a new technicians with this data.
   */
  create: Prisma.XOR<Prisma.techniciansCreateInput, Prisma.techniciansUncheckedCreateInput>
  /**
   * In case the technicians was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.techniciansUpdateInput, Prisma.techniciansUncheckedUpdateInput>
}

/**
 * technicians delete
 */
export type techniciansDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
  /**
   * Filter which technicians to delete.
   */
  where: Prisma.techniciansWhereUniqueInput
}

/**
 * technicians deleteMany
 */
export type techniciansDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which technicians to delete
   */
  where?: Prisma.techniciansWhereInput
  /**
   * Limit how many technicians to delete.
   */
  limit?: number
}

/**
 * technicians.vehiclemaintenance
 */
export type technicians$vehiclemaintenanceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehiclemaintenance
   */
  select?: Prisma.vehiclemaintenanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehiclemaintenance
   */
  omit?: Prisma.vehiclemaintenanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclemaintenanceInclude<ExtArgs> | null
  where?: Prisma.vehiclemaintenanceWhereInput
  orderBy?: Prisma.vehiclemaintenanceOrderByWithRelationInput | Prisma.vehiclemaintenanceOrderByWithRelationInput[]
  cursor?: Prisma.vehiclemaintenanceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.VehiclemaintenanceScalarFieldEnum | Prisma.VehiclemaintenanceScalarFieldEnum[]
}

/**
 * technicians without action
 */
export type techniciansDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the technicians
   */
  select?: Prisma.techniciansSelect<ExtArgs> | null
  /**
   * Omit specific fields from the technicians
   */
  omit?: Prisma.techniciansOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.techniciansInclude<ExtArgs> | null
}
