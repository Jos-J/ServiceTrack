
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `shops` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model shops
 * 
 */
export type shopsModel = runtime.Types.Result.DefaultSelection<Prisma.$shopsPayload>

export type AggregateShops = {
  _count: ShopsCountAggregateOutputType | null
  _avg: ShopsAvgAggregateOutputType | null
  _sum: ShopsSumAggregateOutputType | null
  _min: ShopsMinAggregateOutputType | null
  _max: ShopsMaxAggregateOutputType | null
}

export type ShopsAvgAggregateOutputType = {
  shop_id: number | null
}

export type ShopsSumAggregateOutputType = {
  shop_id: number | null
}

export type ShopsMinAggregateOutputType = {
  shop_id: number | null
  shop_name: string | null
  phone: string | null
  email: string | null
  address: string | null
  notes: string | null
}

export type ShopsMaxAggregateOutputType = {
  shop_id: number | null
  shop_name: string | null
  phone: string | null
  email: string | null
  address: string | null
  notes: string | null
}

export type ShopsCountAggregateOutputType = {
  shop_id: number
  shop_name: number
  phone: number
  email: number
  address: number
  notes: number
  _all: number
}


export type ShopsAvgAggregateInputType = {
  shop_id?: true
}

export type ShopsSumAggregateInputType = {
  shop_id?: true
}

export type ShopsMinAggregateInputType = {
  shop_id?: true
  shop_name?: true
  phone?: true
  email?: true
  address?: true
  notes?: true
}

export type ShopsMaxAggregateInputType = {
  shop_id?: true
  shop_name?: true
  phone?: true
  email?: true
  address?: true
  notes?: true
}

export type ShopsCountAggregateInputType = {
  shop_id?: true
  shop_name?: true
  phone?: true
  email?: true
  address?: true
  notes?: true
  _all?: true
}

export type ShopsAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which shops to aggregate.
   */
  where?: Prisma.shopsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of shops to fetch.
   */
  orderBy?: Prisma.shopsOrderByWithRelationInput | Prisma.shopsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.shopsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` shops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` shops.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned shops
  **/
  _count?: true | ShopsCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ShopsAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ShopsSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ShopsMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ShopsMaxAggregateInputType
}

export type GetShopsAggregateType<T extends ShopsAggregateArgs> = {
      [P in keyof T & keyof AggregateShops]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateShops[P]>
    : Prisma.GetScalarType<T[P], AggregateShops[P]>
}




export type shopsGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.shopsWhereInput
  orderBy?: Prisma.shopsOrderByWithAggregationInput | Prisma.shopsOrderByWithAggregationInput[]
  by: Prisma.ShopsScalarFieldEnum[] | Prisma.ShopsScalarFieldEnum
  having?: Prisma.shopsScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ShopsCountAggregateInputType | true
  _avg?: ShopsAvgAggregateInputType
  _sum?: ShopsSumAggregateInputType
  _min?: ShopsMinAggregateInputType
  _max?: ShopsMaxAggregateInputType
}

export type ShopsGroupByOutputType = {
  shop_id: number
  shop_name: string
  phone: string | null
  email: string | null
  address: string | null
  notes: string | null
  _count: ShopsCountAggregateOutputType | null
  _avg: ShopsAvgAggregateOutputType | null
  _sum: ShopsSumAggregateOutputType | null
  _min: ShopsMinAggregateOutputType | null
  _max: ShopsMaxAggregateOutputType | null
}

type GetShopsGroupByPayload<T extends shopsGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ShopsGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ShopsGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ShopsGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ShopsGroupByOutputType[P]>
      }
    >
  >



export type shopsWhereInput = {
  AND?: Prisma.shopsWhereInput | Prisma.shopsWhereInput[]
  OR?: Prisma.shopsWhereInput[]
  NOT?: Prisma.shopsWhereInput | Prisma.shopsWhereInput[]
  shop_id?: Prisma.IntFilter<"shops"> | number
  shop_name?: Prisma.StringFilter<"shops"> | string
  phone?: Prisma.StringNullableFilter<"shops"> | string | null
  email?: Prisma.StringNullableFilter<"shops"> | string | null
  address?: Prisma.StringNullableFilter<"shops"> | string | null
  notes?: Prisma.StringNullableFilter<"shops"> | string | null
  vehiclemaintenance?: Prisma.VehiclemaintenanceListRelationFilter
}

export type shopsOrderByWithRelationInput = {
  shop_id?: Prisma.SortOrder
  shop_name?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  vehiclemaintenance?: Prisma.vehiclemaintenanceOrderByRelationAggregateInput
}

export type shopsWhereUniqueInput = Prisma.AtLeast<{
  shop_id?: number
  shop_name?: string
  AND?: Prisma.shopsWhereInput | Prisma.shopsWhereInput[]
  OR?: Prisma.shopsWhereInput[]
  NOT?: Prisma.shopsWhereInput | Prisma.shopsWhereInput[]
  phone?: Prisma.StringNullableFilter<"shops"> | string | null
  email?: Prisma.StringNullableFilter<"shops"> | string | null
  address?: Prisma.StringNullableFilter<"shops"> | string | null
  notes?: Prisma.StringNullableFilter<"shops"> | string | null
  vehiclemaintenance?: Prisma.VehiclemaintenanceListRelationFilter
}, "shop_id" | "shop_name">

export type shopsOrderByWithAggregationInput = {
  shop_id?: Prisma.SortOrder
  shop_name?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  email?: Prisma.SortOrderInput | Prisma.SortOrder
  address?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  _count?: Prisma.shopsCountOrderByAggregateInput
  _avg?: Prisma.shopsAvgOrderByAggregateInput
  _max?: Prisma.shopsMaxOrderByAggregateInput
  _min?: Prisma.shopsMinOrderByAggregateInput
  _sum?: Prisma.shopsSumOrderByAggregateInput
}

export type shopsScalarWhereWithAggregatesInput = {
  AND?: Prisma.shopsScalarWhereWithAggregatesInput | Prisma.shopsScalarWhereWithAggregatesInput[]
  OR?: Prisma.shopsScalarWhereWithAggregatesInput[]
  NOT?: Prisma.shopsScalarWhereWithAggregatesInput | Prisma.shopsScalarWhereWithAggregatesInput[]
  shop_id?: Prisma.IntWithAggregatesFilter<"shops"> | number
  shop_name?: Prisma.StringWithAggregatesFilter<"shops"> | string
  phone?: Prisma.StringNullableWithAggregatesFilter<"shops"> | string | null
  email?: Prisma.StringNullableWithAggregatesFilter<"shops"> | string | null
  address?: Prisma.StringNullableWithAggregatesFilter<"shops"> | string | null
  notes?: Prisma.StringNullableWithAggregatesFilter<"shops"> | string | null
}

export type shopsCreateInput = {
  shop_name: string
  phone?: string | null
  email?: string | null
  address?: string | null
  notes?: string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceCreateNestedManyWithoutShopsInput
}

export type shopsUncheckedCreateInput = {
  shop_id?: number
  shop_name: string
  phone?: string | null
  email?: string | null
  address?: string | null
  notes?: string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceUncheckedCreateNestedManyWithoutShopsInput
}

export type shopsUpdateInput = {
  shop_name?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceUpdateManyWithoutShopsNestedInput
}

export type shopsUncheckedUpdateInput = {
  shop_id?: Prisma.IntFieldUpdateOperationsInput | number
  shop_name?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  vehiclemaintenance?: Prisma.vehiclemaintenanceUncheckedUpdateManyWithoutShopsNestedInput
}

export type shopsCreateManyInput = {
  shop_id?: number
  shop_name: string
  phone?: string | null
  email?: string | null
  address?: string | null
  notes?: string | null
}

export type shopsUpdateManyMutationInput = {
  shop_name?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type shopsUncheckedUpdateManyInput = {
  shop_id?: Prisma.IntFieldUpdateOperationsInput | number
  shop_name?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type shopsCountOrderByAggregateInput = {
  shop_id?: Prisma.SortOrder
  shop_name?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  address?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type shopsAvgOrderByAggregateInput = {
  shop_id?: Prisma.SortOrder
}

export type shopsMaxOrderByAggregateInput = {
  shop_id?: Prisma.SortOrder
  shop_name?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  address?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type shopsMinOrderByAggregateInput = {
  shop_id?: Prisma.SortOrder
  shop_name?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  email?: Prisma.SortOrder
  address?: Prisma.SortOrder
  notes?: Prisma.SortOrder
}

export type shopsSumOrderByAggregateInput = {
  shop_id?: Prisma.SortOrder
}

export type ShopsNullableScalarRelationFilter = {
  is?: Prisma.shopsWhereInput | null
  isNot?: Prisma.shopsWhereInput | null
}

export type shopsCreateNestedOneWithoutVehiclemaintenanceInput = {
  create?: Prisma.XOR<Prisma.shopsCreateWithoutVehiclemaintenanceInput, Prisma.shopsUncheckedCreateWithoutVehiclemaintenanceInput>
  connectOrCreate?: Prisma.shopsCreateOrConnectWithoutVehiclemaintenanceInput
  connect?: Prisma.shopsWhereUniqueInput
}

export type shopsUpdateOneWithoutVehiclemaintenanceNestedInput = {
  create?: Prisma.XOR<Prisma.shopsCreateWithoutVehiclemaintenanceInput, Prisma.shopsUncheckedCreateWithoutVehiclemaintenanceInput>
  connectOrCreate?: Prisma.shopsCreateOrConnectWithoutVehiclemaintenanceInput
  upsert?: Prisma.shopsUpsertWithoutVehiclemaintenanceInput
  disconnect?: Prisma.shopsWhereInput | boolean
  delete?: Prisma.shopsWhereInput | boolean
  connect?: Prisma.shopsWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.shopsUpdateToOneWithWhereWithoutVehiclemaintenanceInput, Prisma.shopsUpdateWithoutVehiclemaintenanceInput>, Prisma.shopsUncheckedUpdateWithoutVehiclemaintenanceInput>
}

export type shopsCreateWithoutVehiclemaintenanceInput = {
  shop_name: string
  phone?: string | null
  email?: string | null
  address?: string | null
  notes?: string | null
}

export type shopsUncheckedCreateWithoutVehiclemaintenanceInput = {
  shop_id?: number
  shop_name: string
  phone?: string | null
  email?: string | null
  address?: string | null
  notes?: string | null
}

export type shopsCreateOrConnectWithoutVehiclemaintenanceInput = {
  where: Prisma.shopsWhereUniqueInput
  create: Prisma.XOR<Prisma.shopsCreateWithoutVehiclemaintenanceInput, Prisma.shopsUncheckedCreateWithoutVehiclemaintenanceInput>
}

export type shopsUpsertWithoutVehiclemaintenanceInput = {
  update: Prisma.XOR<Prisma.shopsUpdateWithoutVehiclemaintenanceInput, Prisma.shopsUncheckedUpdateWithoutVehiclemaintenanceInput>
  create: Prisma.XOR<Prisma.shopsCreateWithoutVehiclemaintenanceInput, Prisma.shopsUncheckedCreateWithoutVehiclemaintenanceInput>
  where?: Prisma.shopsWhereInput
}

export type shopsUpdateToOneWithWhereWithoutVehiclemaintenanceInput = {
  where?: Prisma.shopsWhereInput
  data: Prisma.XOR<Prisma.shopsUpdateWithoutVehiclemaintenanceInput, Prisma.shopsUncheckedUpdateWithoutVehiclemaintenanceInput>
}

export type shopsUpdateWithoutVehiclemaintenanceInput = {
  shop_name?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}

export type shopsUncheckedUpdateWithoutVehiclemaintenanceInput = {
  shop_id?: Prisma.IntFieldUpdateOperationsInput | number
  shop_name?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  email?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  address?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
}


/**
 * Count Type ShopsCountOutputType
 */

export type ShopsCountOutputType = {
  vehiclemaintenance: number
}

export type ShopsCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vehiclemaintenance?: boolean | ShopsCountOutputTypeCountVehiclemaintenanceArgs
}

/**
 * ShopsCountOutputType without action
 */
export type ShopsCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ShopsCountOutputType
   */
  select?: Prisma.ShopsCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ShopsCountOutputType without action
 */
export type ShopsCountOutputTypeCountVehiclemaintenanceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.vehiclemaintenanceWhereInput
}


export type shopsSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  shop_id?: boolean
  shop_name?: boolean
  phone?: boolean
  email?: boolean
  address?: boolean
  notes?: boolean
  vehiclemaintenance?: boolean | Prisma.shops$vehiclemaintenanceArgs<ExtArgs>
  _count?: boolean | Prisma.ShopsCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["shops"]>

export type shopsSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  shop_id?: boolean
  shop_name?: boolean
  phone?: boolean
  email?: boolean
  address?: boolean
  notes?: boolean
}, ExtArgs["result"]["shops"]>

export type shopsSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  shop_id?: boolean
  shop_name?: boolean
  phone?: boolean
  email?: boolean
  address?: boolean
  notes?: boolean
}, ExtArgs["result"]["shops"]>

export type shopsSelectScalar = {
  shop_id?: boolean
  shop_name?: boolean
  phone?: boolean
  email?: boolean
  address?: boolean
  notes?: boolean
}

export type shopsOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"shop_id" | "shop_name" | "phone" | "email" | "address" | "notes", ExtArgs["result"]["shops"]>
export type shopsInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  vehiclemaintenance?: boolean | Prisma.shops$vehiclemaintenanceArgs<ExtArgs>
  _count?: boolean | Prisma.ShopsCountOutputTypeDefaultArgs<ExtArgs>
}
export type shopsIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type shopsIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $shopsPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "shops"
  objects: {
    vehiclemaintenance: Prisma.$vehiclemaintenancePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    shop_id: number
    shop_name: string
    phone: string | null
    email: string | null
    address: string | null
    notes: string | null
  }, ExtArgs["result"]["shops"]>
  composites: {}
}

export type shopsGetPayload<S extends boolean | null | undefined | shopsDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$shopsPayload, S>

export type shopsCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<shopsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ShopsCountAggregateInputType | true
  }

export interface shopsDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['shops'], meta: { name: 'shops' } }
  /**
   * Find zero or one Shops that matches the filter.
   * @param {shopsFindUniqueArgs} args - Arguments to find a Shops
   * @example
   * // Get one Shops
   * const shops = await prisma.shops.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends shopsFindUniqueArgs>(args: Prisma.SelectSubset<T, shopsFindUniqueArgs<ExtArgs>>): Prisma.Prisma__shopsClient<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Shops that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {shopsFindUniqueOrThrowArgs} args - Arguments to find a Shops
   * @example
   * // Get one Shops
   * const shops = await prisma.shops.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends shopsFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, shopsFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__shopsClient<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Shops that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {shopsFindFirstArgs} args - Arguments to find a Shops
   * @example
   * // Get one Shops
   * const shops = await prisma.shops.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends shopsFindFirstArgs>(args?: Prisma.SelectSubset<T, shopsFindFirstArgs<ExtArgs>>): Prisma.Prisma__shopsClient<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Shops that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {shopsFindFirstOrThrowArgs} args - Arguments to find a Shops
   * @example
   * // Get one Shops
   * const shops = await prisma.shops.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends shopsFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, shopsFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__shopsClient<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Shops that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {shopsFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Shops
   * const shops = await prisma.shops.findMany()
   * 
   * // Get first 10 Shops
   * const shops = await prisma.shops.findMany({ take: 10 })
   * 
   * // Only select the `shop_id`
   * const shopsWithShop_idOnly = await prisma.shops.findMany({ select: { shop_id: true } })
   * 
   */
  findMany<T extends shopsFindManyArgs>(args?: Prisma.SelectSubset<T, shopsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Shops.
   * @param {shopsCreateArgs} args - Arguments to create a Shops.
   * @example
   * // Create one Shops
   * const Shops = await prisma.shops.create({
   *   data: {
   *     // ... data to create a Shops
   *   }
   * })
   * 
   */
  create<T extends shopsCreateArgs>(args: Prisma.SelectSubset<T, shopsCreateArgs<ExtArgs>>): Prisma.Prisma__shopsClient<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Shops.
   * @param {shopsCreateManyArgs} args - Arguments to create many Shops.
   * @example
   * // Create many Shops
   * const shops = await prisma.shops.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends shopsCreateManyArgs>(args?: Prisma.SelectSubset<T, shopsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Shops and returns the data saved in the database.
   * @param {shopsCreateManyAndReturnArgs} args - Arguments to create many Shops.
   * @example
   * // Create many Shops
   * const shops = await prisma.shops.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Shops and only return the `shop_id`
   * const shopsWithShop_idOnly = await prisma.shops.createManyAndReturn({
   *   select: { shop_id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends shopsCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, shopsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Shops.
   * @param {shopsDeleteArgs} args - Arguments to delete one Shops.
   * @example
   * // Delete one Shops
   * const Shops = await prisma.shops.delete({
   *   where: {
   *     // ... filter to delete one Shops
   *   }
   * })
   * 
   */
  delete<T extends shopsDeleteArgs>(args: Prisma.SelectSubset<T, shopsDeleteArgs<ExtArgs>>): Prisma.Prisma__shopsClient<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Shops.
   * @param {shopsUpdateArgs} args - Arguments to update one Shops.
   * @example
   * // Update one Shops
   * const shops = await prisma.shops.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends shopsUpdateArgs>(args: Prisma.SelectSubset<T, shopsUpdateArgs<ExtArgs>>): Prisma.Prisma__shopsClient<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Shops.
   * @param {shopsDeleteManyArgs} args - Arguments to filter Shops to delete.
   * @example
   * // Delete a few Shops
   * const { count } = await prisma.shops.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends shopsDeleteManyArgs>(args?: Prisma.SelectSubset<T, shopsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shops.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {shopsUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Shops
   * const shops = await prisma.shops.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends shopsUpdateManyArgs>(args: Prisma.SelectSubset<T, shopsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Shops and returns the data updated in the database.
   * @param {shopsUpdateManyAndReturnArgs} args - Arguments to update many Shops.
   * @example
   * // Update many Shops
   * const shops = await prisma.shops.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Shops and only return the `shop_id`
   * const shopsWithShop_idOnly = await prisma.shops.updateManyAndReturn({
   *   select: { shop_id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends shopsUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, shopsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Shops.
   * @param {shopsUpsertArgs} args - Arguments to update or create a Shops.
   * @example
   * // Update or create a Shops
   * const shops = await prisma.shops.upsert({
   *   create: {
   *     // ... data to create a Shops
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Shops we want to update
   *   }
   * })
   */
  upsert<T extends shopsUpsertArgs>(args: Prisma.SelectSubset<T, shopsUpsertArgs<ExtArgs>>): Prisma.Prisma__shopsClient<runtime.Types.Result.GetResult<Prisma.$shopsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Shops.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {shopsCountArgs} args - Arguments to filter Shops to count.
   * @example
   * // Count the number of Shops
   * const count = await prisma.shops.count({
   *   where: {
   *     // ... the filter for the Shops we want to count
   *   }
   * })
  **/
  count<T extends shopsCountArgs>(
    args?: Prisma.Subset<T, shopsCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ShopsCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Shops.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ShopsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ShopsAggregateArgs>(args: Prisma.Subset<T, ShopsAggregateArgs>): Prisma.PrismaPromise<GetShopsAggregateType<T>>

  /**
   * Group by Shops.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {shopsGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends shopsGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: shopsGroupByArgs['orderBy'] }
      : { orderBy?: shopsGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, shopsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShopsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the shops model
 */
readonly fields: shopsFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for shops.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__shopsClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  vehiclemaintenance<T extends Prisma.shops$vehiclemaintenanceArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.shops$vehiclemaintenanceArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$vehiclemaintenancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the shops model
 */
export interface shopsFieldRefs {
  readonly shop_id: Prisma.FieldRef<"shops", 'Int'>
  readonly shop_name: Prisma.FieldRef<"shops", 'String'>
  readonly phone: Prisma.FieldRef<"shops", 'String'>
  readonly email: Prisma.FieldRef<"shops", 'String'>
  readonly address: Prisma.FieldRef<"shops", 'String'>
  readonly notes: Prisma.FieldRef<"shops", 'String'>
}
    

// Custom InputTypes
/**
 * shops findUnique
 */
export type shopsFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
  /**
   * Filter, which shops to fetch.
   */
  where: Prisma.shopsWhereUniqueInput
}

/**
 * shops findUniqueOrThrow
 */
export type shopsFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
  /**
   * Filter, which shops to fetch.
   */
  where: Prisma.shopsWhereUniqueInput
}

/**
 * shops findFirst
 */
export type shopsFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
  /**
   * Filter, which shops to fetch.
   */
  where?: Prisma.shopsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of shops to fetch.
   */
  orderBy?: Prisma.shopsOrderByWithRelationInput | Prisma.shopsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for shops.
   */
  cursor?: Prisma.shopsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` shops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` shops.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of shops.
   */
  distinct?: Prisma.ShopsScalarFieldEnum | Prisma.ShopsScalarFieldEnum[]
}

/**
 * shops findFirstOrThrow
 */
export type shopsFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
  /**
   * Filter, which shops to fetch.
   */
  where?: Prisma.shopsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of shops to fetch.
   */
  orderBy?: Prisma.shopsOrderByWithRelationInput | Prisma.shopsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for shops.
   */
  cursor?: Prisma.shopsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` shops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` shops.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of shops.
   */
  distinct?: Prisma.ShopsScalarFieldEnum | Prisma.ShopsScalarFieldEnum[]
}

/**
 * shops findMany
 */
export type shopsFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
  /**
   * Filter, which shops to fetch.
   */
  where?: Prisma.shopsWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of shops to fetch.
   */
  orderBy?: Prisma.shopsOrderByWithRelationInput | Prisma.shopsOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing shops.
   */
  cursor?: Prisma.shopsWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` shops from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` shops.
   */
  skip?: number
  distinct?: Prisma.ShopsScalarFieldEnum | Prisma.ShopsScalarFieldEnum[]
}

/**
 * shops create
 */
export type shopsCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
  /**
   * The data needed to create a shops.
   */
  data: Prisma.XOR<Prisma.shopsCreateInput, Prisma.shopsUncheckedCreateInput>
}

/**
 * shops createMany
 */
export type shopsCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many shops.
   */
  data: Prisma.shopsCreateManyInput | Prisma.shopsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * shops createManyAndReturn
 */
export type shopsCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * The data used to create many shops.
   */
  data: Prisma.shopsCreateManyInput | Prisma.shopsCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * shops update
 */
export type shopsUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
  /**
   * The data needed to update a shops.
   */
  data: Prisma.XOR<Prisma.shopsUpdateInput, Prisma.shopsUncheckedUpdateInput>
  /**
   * Choose, which shops to update.
   */
  where: Prisma.shopsWhereUniqueInput
}

/**
 * shops updateMany
 */
export type shopsUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update shops.
   */
  data: Prisma.XOR<Prisma.shopsUpdateManyMutationInput, Prisma.shopsUncheckedUpdateManyInput>
  /**
   * Filter which shops to update
   */
  where?: Prisma.shopsWhereInput
  /**
   * Limit how many shops to update.
   */
  limit?: number
}

/**
 * shops updateManyAndReturn
 */
export type shopsUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * The data used to update shops.
   */
  data: Prisma.XOR<Prisma.shopsUpdateManyMutationInput, Prisma.shopsUncheckedUpdateManyInput>
  /**
   * Filter which shops to update
   */
  where?: Prisma.shopsWhereInput
  /**
   * Limit how many shops to update.
   */
  limit?: number
}

/**
 * shops upsert
 */
export type shopsUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
  /**
   * The filter to search for the shops to update in case it exists.
   */
  where: Prisma.shopsWhereUniqueInput
  /**
   * In case the shops found by the `where` argument doesn't exist, create a new shops with this data.
   */
  create: Prisma.XOR<Prisma.shopsCreateInput, Prisma.shopsUncheckedCreateInput>
  /**
   * In case the shops was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.shopsUpdateInput, Prisma.shopsUncheckedUpdateInput>
}

/**
 * shops delete
 */
export type shopsDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
  /**
   * Filter which shops to delete.
   */
  where: Prisma.shopsWhereUniqueInput
}

/**
 * shops deleteMany
 */
export type shopsDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which shops to delete
   */
  where?: Prisma.shopsWhereInput
  /**
   * Limit how many shops to delete.
   */
  limit?: number
}

/**
 * shops.vehiclemaintenance
 */
export type shops$vehiclemaintenanceArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the vehiclemaintenance
   */
  select?: Prisma.vehiclemaintenanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the vehiclemaintenance
   */
  omit?: Prisma.vehiclemaintenanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.vehiclemaintenanceInclude<ExtArgs> | null
  where?: Prisma.vehiclemaintenanceWhereInput
  orderBy?: Prisma.vehiclemaintenanceOrderByWithRelationInput | Prisma.vehiclemaintenanceOrderByWithRelationInput[]
  cursor?: Prisma.vehiclemaintenanceWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.VehiclemaintenanceScalarFieldEnum | Prisma.VehiclemaintenanceScalarFieldEnum[]
}

/**
 * shops without action
 */
export type shopsDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the shops
   */
  select?: Prisma.shopsSelect<ExtArgs> | null
  /**
   * Omit specific fields from the shops
   */
  omit?: Prisma.shopsOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.shopsInclude<ExtArgs> | null
}
